manifest {
  author = 'Dan Fornika'
  name = 'BCCDC-PHL/snippy-nf'
  version = '0.1.0'
  description = 'BCCDC-PHL Nextflow wrapper for Snippy'
  mainScript = 'main.nf'
  nextflowVersion = '>=20.01.0'
}

params {
  samplesheet_input = 'NO_FILE'
  fastq_input = 'NO_FILE'
  ref = 'NO_FILE'
  illumina_suffixes = ['*_R{1,2}_001', '*_R{1,2}', '*_{1,2}' ]
  fastq_exts = ['.fastq.gz', '.fq.gz', '.fastq', '.fq']
  fastq_search_path = makeFastqSearchPath( illumina_suffixes, fastq_exts )
  versioned_outdir = false
  mincov = 10
  basequal = 13
  mapqual = 60
  minfrac = 0
  outdir = 'results'
  pipeline_short_name = parsePipelineName(manifest.toMap().get('name'))
  pipeline_minor_version = parseMinorVersion(manifest.toMap().get('version'))
}

def parseMinorVersion(version) {
    minor_version = version.split('\\.')[0..1].join('.')
    return minor_version
}

def parsePipelineName(name) {
    short_name = name.split('/')[1]
    return short_name
}

def makeFastqSearchPath ( illumina_suffixes, fastq_exts ) {
    def fastq_search_path = []
    for (suffix in illumina_suffixes){
        for (ext in fastq_exts) {
            fastq_search_path.add(params.fastq_input.toString() + '/' + suffix.toString() + ext.toString())
        }
    }
    return fastq_search_path
}

process {
  withName: snippy { 
    cpus = 8
  }
}

profiles {
  conda {
     process.conda = "$baseDir/environments/environment.yml"
     if (params.cache){
       conda.cacheDir = params.cache
     }
  }
}
